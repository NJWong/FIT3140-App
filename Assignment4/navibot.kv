#:kivy 1.8

<NaviBot>:
	naviprogram: naviprogram
	navicontrols: navicontrols
	naviblocks: naviblocks
	navimaze: navimaze

	BoxLayout:
		orientation: 'vertical'

		BoxLayout:
			orientation: 'horizontal'

			ScreenManager:
				id: screen_manager
				#size_hint: 1, 0.9
				
				Screen:
					name: 'programming'

					GridLayout:
						cols: 2

						# NaviBlocks
						NaviBlocks:
							move_block: move_block
							turn_a: turn_a
							turn_c: turn_c
							distance_to_wall: distance_to_wall
							distance_to_goal: distance_to_goal
							set_var: set_var
							take_inputs: take_inputs
							take_n: take_n

							id: naviblocks
							orientation: 'vertical'
							padding: 10,10

							ProgramBlock:
								id: move_block
								text: 'MOVE'
								on_touch_up:
									if self.selected and self.center_x > root.center_x: naviprogram.add_statement(self.text)

							ProgramBlock:
								id: turn_a
								text: 'TURN_A N'
								on_touch_up: 
									if self.selected and self.center_x > 0 and self.center_x<root.center_x: turn_a.text = 'TURN_A ' + t3.text
								on_touch_up:
									if self.selected and self.center_x > root.center_x: naviprogram.add_statement(self.text)

							ProgramBlock:
								id: turn_c
								text: 'TURN_C N'
								on_touch_up: 
									if self.selected and self.center_x > 0 and self.center_x<root.center_x: turn_c.text = 'TURN_C ' + t3.text
								on_touch_up:
									if self.selected and self.center_x > root.center_x: naviprogram.add_statement(self.text)

							ProgramBlock:
								id: distance_to_wall
								text: 'DISTANCE_W'
								on_touch_up:
									if self.selected and self.center_x > root.center_x: naviprogram.add_statement(self.text)

							ProgramBlock:
								id: distance_to_goal
								text: 'DISTANCE_G'
								on_touch_up:
									if self.selected and self.center_x > root.center_x: naviprogram.add_statement(self.
									text)

							ProgramBlock:
								id: set_var
								text: 'SET Name Value'
								on_touch_up: 
									if self.selected and self.center_x > 0 and self.center_x<root.center_x: set_var.text = 'SET ' + take_inputs.t1.text + ' ' + take_inputs.t2.text
								on_touch_up: 
									if self.selected and self.center_x > root.center_x: naviprogram.add_statement(self.text)

							BoxLayout:
								id: take_inputs
								t1: t1
								t2: t2
								TextInput:
									id: t1
									hint_text: 'Type in Variable Name here'
								TextInput:
									id: t2
									hint_text: 'Type in Value here'

							BoxLayout:
								id: take_n
								t3: t3
								TextInput:
									id: t3
									hint_text: 'Type in N times here'

								


						# NaviProgram
						NaviProgram:
							id: naviprogram
							orientation: 'vertical'
							#Label:
								#text: str(naviprogram.program)

				Screen:
					name: 'maze'

					GridLayout:
						cols: 2

						#might edit navicontrols later
						NaviControls:
							id: navicontrols
							size_hint: 0.15, 1
							orientation: 'vertical'

							Button:
								id: run_button
								text: 'RUN'
								#on_press: naviprogram.run_program()
								on_press: root.run_program(naviprogram.program)

							Button:
								id: reset_button
								text: 'RESET'
								on_press: naviprogram.reset(), navimaze.reset_robot_position()
							Label:
								text: 'Direction: ' + str(navimaze.robot.direction)
							Label:
								text: 'Distance: ' + str(navimaze.robot.distance_to_wall)
							Label:
								text: 'D to G: ' + str(navimaze.robot.distance_to_goal)


						# NaviMaze
						NaviMaze:
							id: navimaze
							cols: 5
							rows: 5

		BoxLayout:
			orientation: 'horizontal'
			size_hint: 1, 0.1

			# Screen Controller
			Button:
				text: 'Programming'
				on_press:
					screen_manager.transition.direction = 'right'
					screen_manager.current = 'programming'

			Button:
				text: 'Maze'
				on_press:
					screen_manager.transition.direction = 'left'
					screen_manager.current = 'maze'